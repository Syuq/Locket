// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v2/locket_service.proto

package apiv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocketService_CreateLocket_FullMethodName         = "/lockets.api.v2.LocketService/CreateLocket"
	LocketService_ListLockets_FullMethodName          = "/lockets.api.v2.LocketService/ListLockets"
	LocketService_SearchLockets_FullMethodName        = "/lockets.api.v2.LocketService/SearchLockets"
	LocketService_GetLocket_FullMethodName            = "/lockets.api.v2.LocketService/GetLocket"
	LocketService_UpdateLocket_FullMethodName         = "/lockets.api.v2.LocketService/UpdateLocket"
	LocketService_DeleteLocket_FullMethodName         = "/lockets.api.v2.LocketService/DeleteLocket"
	LocketService_ExportLockets_FullMethodName        = "/lockets.api.v2.LocketService/ExportLockets"
	LocketService_SetLocketResources_FullMethodName   = "/lockets.api.v2.LocketService/SetLocketResources"
	LocketService_ListLocketResources_FullMethodName  = "/lockets.api.v2.LocketService/ListLocketResources"
	LocketService_SetLocketRelations_FullMethodName   = "/lockets.api.v2.LocketService/SetLocketRelations"
	LocketService_ListLocketRelations_FullMethodName  = "/lockets.api.v2.LocketService/ListLocketRelations"
	LocketService_CreateLocketComment_FullMethodName  = "/lockets.api.v2.LocketService/CreateLocketComment"
	LocketService_ListLocketComments_FullMethodName   = "/lockets.api.v2.LocketService/ListLocketComments"
	LocketService_GetUserLocketsStats_FullMethodName  = "/lockets.api.v2.LocketService/GetUserLocketsStats"
	LocketService_ListLocketReactions_FullMethodName  = "/lockets.api.v2.LocketService/ListLocketReactions"
	LocketService_UpsertLocketReaction_FullMethodName = "/lockets.api.v2.LocketService/UpsertLocketReaction"
	LocketService_DeleteLocketReaction_FullMethodName = "/lockets.api.v2.LocketService/DeleteLocketReaction"
)

// LocketServiceClient is the client API for LocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocketServiceClient interface {
	// CreateLocket creates a locket.
	CreateLocket(ctx context.Context, in *CreateLocketRequest, opts ...grpc.CallOption) (*CreateLocketResponse, error)
	// ListLockets lists lockets with pagination and filter.
	ListLockets(ctx context.Context, in *ListLocketsRequest, opts ...grpc.CallOption) (*ListLocketsResponse, error)
	// SearchLockets searches lockets.
	SearchLockets(ctx context.Context, in *SearchLocketsRequest, opts ...grpc.CallOption) (*SearchLocketsResponse, error)
	// GetLocket gets a locket.
	GetLocket(ctx context.Context, in *GetLocketRequest, opts ...grpc.CallOption) (*GetLocketResponse, error)
	// UpdateLocket updates a locket.
	UpdateLocket(ctx context.Context, in *UpdateLocketRequest, opts ...grpc.CallOption) (*UpdateLocketResponse, error)
	// DeleteLocket deletes a locket.
	DeleteLocket(ctx context.Context, in *DeleteLocketRequest, opts ...grpc.CallOption) (*DeleteLocketResponse, error)
	// ExportLockets exports lockets.
	ExportLockets(ctx context.Context, in *ExportLocketsRequest, opts ...grpc.CallOption) (*ExportLocketsResponse, error)
	// SetLocketResources sets resources for a locket.
	SetLocketResources(ctx context.Context, in *SetLocketResourcesRequest, opts ...grpc.CallOption) (*SetLocketResourcesResponse, error)
	// ListLocketResources lists resources for a locket.
	ListLocketResources(ctx context.Context, in *ListLocketResourcesRequest, opts ...grpc.CallOption) (*ListLocketResourcesResponse, error)
	// SetLocketRelations sets relations for a locket.
	SetLocketRelations(ctx context.Context, in *SetLocketRelationsRequest, opts ...grpc.CallOption) (*SetLocketRelationsResponse, error)
	// ListLocketRelations lists relations for a locket.
	ListLocketRelations(ctx context.Context, in *ListLocketRelationsRequest, opts ...grpc.CallOption) (*ListLocketRelationsResponse, error)
	// CreateLocketComment creates a comment for a locket.
	CreateLocketComment(ctx context.Context, in *CreateLocketCommentRequest, opts ...grpc.CallOption) (*CreateLocketCommentResponse, error)
	// ListLocketComments lists comments for a locket.
	ListLocketComments(ctx context.Context, in *ListLocketCommentsRequest, opts ...grpc.CallOption) (*ListLocketCommentsResponse, error)
	// GetUserLocketsStats gets stats of lockets for a user.
	GetUserLocketsStats(ctx context.Context, in *GetUserLocketsStatsRequest, opts ...grpc.CallOption) (*GetUserLocketsStatsResponse, error)
	// ListLocketReactions lists reactions for a locket.
	ListLocketReactions(ctx context.Context, in *ListLocketReactionsRequest, opts ...grpc.CallOption) (*ListLocketReactionsResponse, error)
	// UpsertLocketReaction upserts a reaction for a locket.
	UpsertLocketReaction(ctx context.Context, in *UpsertLocketReactionRequest, opts ...grpc.CallOption) (*UpsertLocketReactionResponse, error)
	// DeleteLocketReaction deletes a reaction for a locket.
	DeleteLocketReaction(ctx context.Context, in *DeleteLocketReactionRequest, opts ...grpc.CallOption) (*DeleteLocketReactionResponse, error)
}

type locketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocketServiceClient(cc grpc.ClientConnInterface) LocketServiceClient {
	return &locketServiceClient{cc}
}

func (c *locketServiceClient) CreateLocket(ctx context.Context, in *CreateLocketRequest, opts ...grpc.CallOption) (*CreateLocketResponse, error) {
	out := new(CreateLocketResponse)
	err := c.cc.Invoke(ctx, LocketService_CreateLocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) ListLockets(ctx context.Context, in *ListLocketsRequest, opts ...grpc.CallOption) (*ListLocketsResponse, error) {
	out := new(ListLocketsResponse)
	err := c.cc.Invoke(ctx, LocketService_ListLockets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) SearchLockets(ctx context.Context, in *SearchLocketsRequest, opts ...grpc.CallOption) (*SearchLocketsResponse, error) {
	out := new(SearchLocketsResponse)
	err := c.cc.Invoke(ctx, LocketService_SearchLockets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) GetLocket(ctx context.Context, in *GetLocketRequest, opts ...grpc.CallOption) (*GetLocketResponse, error) {
	out := new(GetLocketResponse)
	err := c.cc.Invoke(ctx, LocketService_GetLocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) UpdateLocket(ctx context.Context, in *UpdateLocketRequest, opts ...grpc.CallOption) (*UpdateLocketResponse, error) {
	out := new(UpdateLocketResponse)
	err := c.cc.Invoke(ctx, LocketService_UpdateLocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) DeleteLocket(ctx context.Context, in *DeleteLocketRequest, opts ...grpc.CallOption) (*DeleteLocketResponse, error) {
	out := new(DeleteLocketResponse)
	err := c.cc.Invoke(ctx, LocketService_DeleteLocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) ExportLockets(ctx context.Context, in *ExportLocketsRequest, opts ...grpc.CallOption) (*ExportLocketsResponse, error) {
	out := new(ExportLocketsResponse)
	err := c.cc.Invoke(ctx, LocketService_ExportLockets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) SetLocketResources(ctx context.Context, in *SetLocketResourcesRequest, opts ...grpc.CallOption) (*SetLocketResourcesResponse, error) {
	out := new(SetLocketResourcesResponse)
	err := c.cc.Invoke(ctx, LocketService_SetLocketResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) ListLocketResources(ctx context.Context, in *ListLocketResourcesRequest, opts ...grpc.CallOption) (*ListLocketResourcesResponse, error) {
	out := new(ListLocketResourcesResponse)
	err := c.cc.Invoke(ctx, LocketService_ListLocketResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) SetLocketRelations(ctx context.Context, in *SetLocketRelationsRequest, opts ...grpc.CallOption) (*SetLocketRelationsResponse, error) {
	out := new(SetLocketRelationsResponse)
	err := c.cc.Invoke(ctx, LocketService_SetLocketRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) ListLocketRelations(ctx context.Context, in *ListLocketRelationsRequest, opts ...grpc.CallOption) (*ListLocketRelationsResponse, error) {
	out := new(ListLocketRelationsResponse)
	err := c.cc.Invoke(ctx, LocketService_ListLocketRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) CreateLocketComment(ctx context.Context, in *CreateLocketCommentRequest, opts ...grpc.CallOption) (*CreateLocketCommentResponse, error) {
	out := new(CreateLocketCommentResponse)
	err := c.cc.Invoke(ctx, LocketService_CreateLocketComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) ListLocketComments(ctx context.Context, in *ListLocketCommentsRequest, opts ...grpc.CallOption) (*ListLocketCommentsResponse, error) {
	out := new(ListLocketCommentsResponse)
	err := c.cc.Invoke(ctx, LocketService_ListLocketComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) GetUserLocketsStats(ctx context.Context, in *GetUserLocketsStatsRequest, opts ...grpc.CallOption) (*GetUserLocketsStatsResponse, error) {
	out := new(GetUserLocketsStatsResponse)
	err := c.cc.Invoke(ctx, LocketService_GetUserLocketsStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) ListLocketReactions(ctx context.Context, in *ListLocketReactionsRequest, opts ...grpc.CallOption) (*ListLocketReactionsResponse, error) {
	out := new(ListLocketReactionsResponse)
	err := c.cc.Invoke(ctx, LocketService_ListLocketReactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) UpsertLocketReaction(ctx context.Context, in *UpsertLocketReactionRequest, opts ...grpc.CallOption) (*UpsertLocketReactionResponse, error) {
	out := new(UpsertLocketReactionResponse)
	err := c.cc.Invoke(ctx, LocketService_UpsertLocketReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locketServiceClient) DeleteLocketReaction(ctx context.Context, in *DeleteLocketReactionRequest, opts ...grpc.CallOption) (*DeleteLocketReactionResponse, error) {
	out := new(DeleteLocketReactionResponse)
	err := c.cc.Invoke(ctx, LocketService_DeleteLocketReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocketServiceServer is the server API for LocketService service.
// All implementations must embed UnimplementedLocketServiceServer
// for forward compatibility
type LocketServiceServer interface {
	// CreateLocket creates a locket.
	CreateLocket(context.Context, *CreateLocketRequest) (*CreateLocketResponse, error)
	// ListLockets lists lockets with pagination and filter.
	ListLockets(context.Context, *ListLocketsRequest) (*ListLocketsResponse, error)
	// SearchLockets searches lockets.
	SearchLockets(context.Context, *SearchLocketsRequest) (*SearchLocketsResponse, error)
	// GetLocket gets a locket.
	GetLocket(context.Context, *GetLocketRequest) (*GetLocketResponse, error)
	// UpdateLocket updates a locket.
	UpdateLocket(context.Context, *UpdateLocketRequest) (*UpdateLocketResponse, error)
	// DeleteLocket deletes a locket.
	DeleteLocket(context.Context, *DeleteLocketRequest) (*DeleteLocketResponse, error)
	// ExportLockets exports lockets.
	ExportLockets(context.Context, *ExportLocketsRequest) (*ExportLocketsResponse, error)
	// SetLocketResources sets resources for a locket.
	SetLocketResources(context.Context, *SetLocketResourcesRequest) (*SetLocketResourcesResponse, error)
	// ListLocketResources lists resources for a locket.
	ListLocketResources(context.Context, *ListLocketResourcesRequest) (*ListLocketResourcesResponse, error)
	// SetLocketRelations sets relations for a locket.
	SetLocketRelations(context.Context, *SetLocketRelationsRequest) (*SetLocketRelationsResponse, error)
	// ListLocketRelations lists relations for a locket.
	ListLocketRelations(context.Context, *ListLocketRelationsRequest) (*ListLocketRelationsResponse, error)
	// CreateLocketComment creates a comment for a locket.
	CreateLocketComment(context.Context, *CreateLocketCommentRequest) (*CreateLocketCommentResponse, error)
	// ListLocketComments lists comments for a locket.
	ListLocketComments(context.Context, *ListLocketCommentsRequest) (*ListLocketCommentsResponse, error)
	// GetUserLocketsStats gets stats of lockets for a user.
	GetUserLocketsStats(context.Context, *GetUserLocketsStatsRequest) (*GetUserLocketsStatsResponse, error)
	// ListLocketReactions lists reactions for a locket.
	ListLocketReactions(context.Context, *ListLocketReactionsRequest) (*ListLocketReactionsResponse, error)
	// UpsertLocketReaction upserts a reaction for a locket.
	UpsertLocketReaction(context.Context, *UpsertLocketReactionRequest) (*UpsertLocketReactionResponse, error)
	// DeleteLocketReaction deletes a reaction for a locket.
	DeleteLocketReaction(context.Context, *DeleteLocketReactionRequest) (*DeleteLocketReactionResponse, error)
	mustEmbedUnimplementedLocketServiceServer()
}

// UnimplementedLocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocketServiceServer struct {
}

func (UnimplementedLocketServiceServer) CreateLocket(context.Context, *CreateLocketRequest) (*CreateLocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocket not implemented")
}
func (UnimplementedLocketServiceServer) ListLockets(context.Context, *ListLocketsRequest) (*ListLocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLockets not implemented")
}
func (UnimplementedLocketServiceServer) SearchLockets(context.Context, *SearchLocketsRequest) (*SearchLocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLockets not implemented")
}
func (UnimplementedLocketServiceServer) GetLocket(context.Context, *GetLocketRequest) (*GetLocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocket not implemented")
}
func (UnimplementedLocketServiceServer) UpdateLocket(context.Context, *UpdateLocketRequest) (*UpdateLocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocket not implemented")
}
func (UnimplementedLocketServiceServer) DeleteLocket(context.Context, *DeleteLocketRequest) (*DeleteLocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocket not implemented")
}
func (UnimplementedLocketServiceServer) ExportLockets(context.Context, *ExportLocketsRequest) (*ExportLocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportLockets not implemented")
}
func (UnimplementedLocketServiceServer) SetLocketResources(context.Context, *SetLocketResourcesRequest) (*SetLocketResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocketResources not implemented")
}
func (UnimplementedLocketServiceServer) ListLocketResources(context.Context, *ListLocketResourcesRequest) (*ListLocketResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocketResources not implemented")
}
func (UnimplementedLocketServiceServer) SetLocketRelations(context.Context, *SetLocketRelationsRequest) (*SetLocketRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocketRelations not implemented")
}
func (UnimplementedLocketServiceServer) ListLocketRelations(context.Context, *ListLocketRelationsRequest) (*ListLocketRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocketRelations not implemented")
}
func (UnimplementedLocketServiceServer) CreateLocketComment(context.Context, *CreateLocketCommentRequest) (*CreateLocketCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocketComment not implemented")
}
func (UnimplementedLocketServiceServer) ListLocketComments(context.Context, *ListLocketCommentsRequest) (*ListLocketCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocketComments not implemented")
}
func (UnimplementedLocketServiceServer) GetUserLocketsStats(context.Context, *GetUserLocketsStatsRequest) (*GetUserLocketsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLocketsStats not implemented")
}
func (UnimplementedLocketServiceServer) ListLocketReactions(context.Context, *ListLocketReactionsRequest) (*ListLocketReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocketReactions not implemented")
}
func (UnimplementedLocketServiceServer) UpsertLocketReaction(context.Context, *UpsertLocketReactionRequest) (*UpsertLocketReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLocketReaction not implemented")
}
func (UnimplementedLocketServiceServer) DeleteLocketReaction(context.Context, *DeleteLocketReactionRequest) (*DeleteLocketReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocketReaction not implemented")
}
func (UnimplementedLocketServiceServer) mustEmbedUnimplementedLocketServiceServer() {}

// UnsafeLocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocketServiceServer will
// result in compilation errors.
type UnsafeLocketServiceServer interface {
	mustEmbedUnimplementedLocketServiceServer()
}

func RegisterLocketServiceServer(s grpc.ServiceRegistrar, srv LocketServiceServer) {
	s.RegisterService(&LocketService_ServiceDesc, srv)
}

func _LocketService_CreateLocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).CreateLocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_CreateLocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).CreateLocket(ctx, req.(*CreateLocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_ListLockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).ListLockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_ListLockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).ListLockets(ctx, req.(*ListLocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_SearchLockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).SearchLockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_SearchLockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).SearchLockets(ctx, req.(*SearchLocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_GetLocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).GetLocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_GetLocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).GetLocket(ctx, req.(*GetLocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_UpdateLocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).UpdateLocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_UpdateLocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).UpdateLocket(ctx, req.(*UpdateLocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_DeleteLocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).DeleteLocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_DeleteLocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).DeleteLocket(ctx, req.(*DeleteLocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_ExportLockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportLocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).ExportLockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_ExportLockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).ExportLockets(ctx, req.(*ExportLocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_SetLocketResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocketResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).SetLocketResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_SetLocketResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).SetLocketResources(ctx, req.(*SetLocketResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_ListLocketResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocketResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).ListLocketResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_ListLocketResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).ListLocketResources(ctx, req.(*ListLocketResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_SetLocketRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocketRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).SetLocketRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_SetLocketRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).SetLocketRelations(ctx, req.(*SetLocketRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_ListLocketRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocketRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).ListLocketRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_ListLocketRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).ListLocketRelations(ctx, req.(*ListLocketRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_CreateLocketComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocketCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).CreateLocketComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_CreateLocketComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).CreateLocketComment(ctx, req.(*CreateLocketCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_ListLocketComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocketCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).ListLocketComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_ListLocketComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).ListLocketComments(ctx, req.(*ListLocketCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_GetUserLocketsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLocketsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).GetUserLocketsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_GetUserLocketsStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).GetUserLocketsStats(ctx, req.(*GetUserLocketsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_ListLocketReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocketReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).ListLocketReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_ListLocketReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).ListLocketReactions(ctx, req.(*ListLocketReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_UpsertLocketReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLocketReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).UpsertLocketReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_UpsertLocketReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).UpsertLocketReaction(ctx, req.(*UpsertLocketReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocketService_DeleteLocketReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocketReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocketServiceServer).DeleteLocketReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocketService_DeleteLocketReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocketServiceServer).DeleteLocketReaction(ctx, req.(*DeleteLocketReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocketService_ServiceDesc is the grpc.ServiceDesc for LocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lockets.api.v2.LocketService",
	HandlerType: (*LocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocket",
			Handler:    _LocketService_CreateLocket_Handler,
		},
		{
			MethodName: "ListLockets",
			Handler:    _LocketService_ListLockets_Handler,
		},
		{
			MethodName: "SearchLockets",
			Handler:    _LocketService_SearchLockets_Handler,
		},
		{
			MethodName: "GetLocket",
			Handler:    _LocketService_GetLocket_Handler,
		},
		{
			MethodName: "UpdateLocket",
			Handler:    _LocketService_UpdateLocket_Handler,
		},
		{
			MethodName: "DeleteLocket",
			Handler:    _LocketService_DeleteLocket_Handler,
		},
		{
			MethodName: "ExportLockets",
			Handler:    _LocketService_ExportLockets_Handler,
		},
		{
			MethodName: "SetLocketResources",
			Handler:    _LocketService_SetLocketResources_Handler,
		},
		{
			MethodName: "ListLocketResources",
			Handler:    _LocketService_ListLocketResources_Handler,
		},
		{
			MethodName: "SetLocketRelations",
			Handler:    _LocketService_SetLocketRelations_Handler,
		},
		{
			MethodName: "ListLocketRelations",
			Handler:    _LocketService_ListLocketRelations_Handler,
		},
		{
			MethodName: "CreateLocketComment",
			Handler:    _LocketService_CreateLocketComment_Handler,
		},
		{
			MethodName: "ListLocketComments",
			Handler:    _LocketService_ListLocketComments_Handler,
		},
		{
			MethodName: "GetUserLocketsStats",
			Handler:    _LocketService_GetUserLocketsStats_Handler,
		},
		{
			MethodName: "ListLocketReactions",
			Handler:    _LocketService_ListLocketReactions_Handler,
		},
		{
			MethodName: "UpsertLocketReaction",
			Handler:    _LocketService_UpsertLocketReaction_Handler,
		},
		{
			MethodName: "DeleteLocketReaction",
			Handler:    _LocketService_DeleteLocketReaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/locket_service.proto",
}
